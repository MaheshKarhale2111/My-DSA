Q. What are trees, binary trees? 
Ans :  Tree is non lineear data structure. Ideal for representing hierarchical data. Difference between linear and non linear data structure is that , in linear one the ele
element are arranged in linear fashion - to be more specific the order of elements is important and we can traverse the entire data structure in one run. Linear data 
structures are easy to implement as computer memory is arranged in linear way. 
In non linear data structures, it's not singles level 
uses : complex relationships, hierachy, social networks, file systems, huffman coding - data compression technique

Q. Tell example of tree in real life 
Ans. The Filesystems. So whenver we open my files/my computer. Under each drive we have multiple folders representing the nodes. In linux we have something 
as root user. The the who controls the topmost node /file directory. 
Ans2 : in document object model of HTML. There html tag under which there are head and body tags. And they have their own children. 
So lets say by using javascript I want to get hold of all the 'p' tags (const paragraphs = document.querySelectorAll("p");) then this code will run a search through
entire DOM tree. For one specific branch once it reached it's end it will traversed back - dfs search. 
READ THIS FOR DOM -  https://medium.com/@curtis-wilson/tree-data-structures-and-the-dom-e2f0a8463249

2. Internal Node - Node with atleast one child 
3. Depth : The depth of a node is the number of edges present in path from the root  to that node.
4. Height : Vo node niche kaha tak utar sakta hai (deepest leaf)

********** Binary Tree **************** 

1. Whereas in binary tree, each node can have at most two nodes.
2. n nodes => n-1 Edges 
3. Degreas -> no of direct children
4. Degree if a tree us a highest degree of a node among all the nodes present. 
5. Use of binrary Tree ? 

Disadvantages of binary tree : 
1. Only two childs 
2. For every node we have to maintain two child pointers - more memory 
3. Slow performance in worst case senarios - skew tree where each node has only one child - so O(n) time required 
4. If tree is not balanced - if one subtree is larger than the other - the search operations are not efficient. 




---------- Types of Binary Tree --------------------------------
1. Full/ Strict Binary Tree : All nodes have either 0 or 2 chindren. 
2. Perfect Binary Tree : Internal nodes have 2 children and all leaf nodes are on same level. 
    Basically strict binary tree with all leaf nodes are on same level.
3. Complete Binary Tree : 
 A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled,
 and all nodes in the last level are as far left as possible. A perfect tree is therefore always 
 complete but a complete tree is not necessarily perfect.
4. Denerate Tree : Every Parent node has only one child.
5. Skewed Tree : left side and right side 


----------- Representation of binrary tree ------------------------------ 
1. Array representation : Not used as while declaring array we need to give length of array 
                          The absent child are represented as NULL. 
2. Linked Representation : Not linked list!
                           Make use of doubly linked list idea. 
                           
----------------------- LOve Babbar----------------------------------------------------------- 


1. For non binary tree having multiple nodes- > 
    node {
        int data 
        list<Node*> l; 
    }
2. Generally queues are used to travese the tree. this apporach known as breadth-first search(BFS). 
3. Inorder / preorder / postorder traversal 
4. LNR / NLR / LRN 
5. Height of binaray tree question - > used recursiton to solve this 
    Time complexity - O(N) as exactly N nodes are travesed 
    Space complexity - See stack implementation of recursion.  
                    - O (height of tree) 
6. Diamter of Binary tree - Longest path between any two nodes 
    ending nodes can be leaf nodes as well as root nodes 
    2 methods to do one with the optimization
7. Check for balance tree
8. Zig zag tree 
    visiting each node only once to time complexity is O(n) and same for space complexity
9. boundary traversal 

10. ?  What is use of inorder, preorder and postorder traversal 
11. 
9. vertical traversal of binaray tree 
10. Top/ bottom  view of binaray tree 
11. left/ right view of binaray tree
