1. Binary search : 
int binarySearch(vector<int> vec, int n, int key) {

  int start = 0;
  int end = n - 1;

  //   int mid = (start + end) / 2;
  int mid = start + (end - start) / 2;

  while (start <= end) {
    if (vec[mid] == key) {
      return mid;
    }

    // mid = (start + end) / 2;
    mid = start + (end - start) / 2;

    if (vec[mid] < key) {
      start = mid + 1;
    } else if (vec[mid] > key) {
      end = mid - 1;
    }
  }

  return -1;
}

2. For every node : left data is less than root data and right data is more than root data 
3. Time complexity for inserting a node in bst is O(logn ) ->same as binary search -> this is for balanced binary treees 
	in general let say for skew trees where each node has only one child - complexity is o(n) or o(h)
	so for both insertion and searching the time complexity is o(n) 
4. Very imp fact - inorder traversal of binary search tree is sorted 
5. The minimum value of tree is left most leaf and maximum value of tree is rightmost leaf. 
6. Predecessor and Successor ->  
	it's clear that predecessor will found in left sub tree and successor found in right sub tree 
	all numbers in left sub tree will be min than rootVal so maximum element from the left sub tree wll be predecessor 
	all numbers in right sub tree will be max than rootVal so minimum element from the right sub tree will be sucessor 
