Articles : https://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/
MUST READ
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
learn about 2's complement and represeatnation of intmax and intmin - signed and unsigned bit - refer to cs1100 slides 

_____________________________________________________________________________________________________________________________________________________________________

Why need bit manipulation? 
As as programmer we deal with data. if it's an integer it's stored in data container called as 'int' in cpp, if it's decimal then we store it in float or double. if data is complex then graphs , linkedlist and so on. But if programmer wants to go in deeper level of manipulation , something which is closer to system. Then he has to deal with bits and bytes. 
eg. Operations with bits used in data compression. Data encryption ( Exclusive-or Encryption).In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.
Encoding - transforming data in specific format for storage,or sharing(transmission) 
In microcontrollers - when the output is high it's 1 and if it's low then it's 0. 




1. Check binary addition and subtraction 
    1+1 = 10 , 1+1+1 = 11 
2. subtracing in binary equivalent to adding inverse 
    12-5 == 12+ (-5) 

    for finding inverse we use 2's complement method 
3. 2's complement - invert all bits and add 1 
4. note that while inverting - all bits before actual number are acully 0 so after invering it becomes 1 

6. Xor (^) - when both bits are different then it is 1 otherwise 0 
7. The ~ (bitwise NOT) takes one number and inverts all bits of it.
8. The << (left shift) takes two numbers, the left shifts the bits of the first operand, and the second operand decides the number of places to shift. Left shift is equivalent to multiplying the bit pattern with 2^k.
9. The >> (right shift) takes two numbers, right shifts the bits of the first operand, and the second operand decides the number of places to shift. Right shift is equivalent to dividing the bit pattern with 2^k
10. the right shifing by 1 is equivalent to dividing number by 2 
    10 >> 1 -> 1010 >> 1 -> 0101 = 5 
11. How to check even odd - > the last bit of even is 1 and for odd it's zero 
    make sense as other bits only gives power of 2's which adds up to even number only 
    so the last bit which is equivalent to '1' decides it's off or even 
12. bit masking to find odd even 
    if(a&1 == 0) -> odd 
    if(a&1 == 1) -> even 
12. Checking odd even with XOR operator -  when we do xor with 1, if number if odd then it's decreased by 1 and if it's even its increased by 1
9^1 = 8 and 10^1 = 11 
if ((n ^ 1) == (n + 1))
        return even;
else it's odd
12. Checking with OR Operator -  value of the number increase by 1 if the number is even otherwise it will remain unchanged.
	if ((n | 1) > n)
        return even;
        else odd
12. By using left and right shift - we know left shift mutiply number by 2 and right shift divide number by 2. 
	So if we have even number multiplying and dividing number by 2 won't change anything but for odd number if we divide by 2 and then multiply by 2 it will change. This we can use to determine odd/even. 
	if ( ( num >> 1) << 1 == num) {
    	even number
	} else odd number
  
13. To swap two numbers a and b-
    a = a ^ b ; 
    b = a ^ b ; 
    a = a ^ b ; 

-------------------------------------------------------------------------------------------------------------------------- 

1. Bitmasking - imposing mask over the bits. to keep, change, or remove a desired part of information 
2. use of bitmasking - In computer graphics, bitmasking is used to alter pixels and run various operations on images.- insta filters 
3. Bitmasking increases code complexity and decreases the ease of read . 
4. Find , set and clear ith bit - watch anuj bhaiys's second video 
5. number of bits in binary representation of number = log2n + 1 
log2n is basically how many times you have halve the 'n' number . So number of bits in number is equal to how many times you can halve the number + the remainder.

------------------------------------------------------------------------------------------------------------------------------ 
Counting Set Bits : 
Brian Kernighanâ€™s Algorithm: 
Subtracting 1 from a decimal number flips all the bits after the rightmost set bit(which is 1) including the rightmost set bit. 
for example : 
10 in binary is 00001010 
9 in binary is 00001001 
8 in binary is 00001000 
7 in binary is 00000111 
So if we subtract a number by 1 and do it bitwise & with itself (n & (n-1)), we unset the rightmost set bit. If we do n & (n-1) in a loop and count the number of times the loop executes, we get the set bit count. 

Method bits : In GCC, we can directly count set bits using __builtin_popcount(). So we can avoid a separate function for counting set bits. Time complexity - O(n) 
------------------------------------------------------------------------------------------------------------------------------ 
Find number of bits in number 
Method 1 : use formula log2n + 1 
Method 2 : use left shift operator 
	int n; 
	int count = 0; 
	while( n) {
	n = n>>1; 
	count++; 
	}
---------------------------------------------------------------------------------------------------------------------------------

5. Find number of bits to change to convert from a to b 
    concept 1 : The xor operator only activates when two bits are different 
        eq. 9 and 3 - 1001 and 0101 -> so 9^3 -> 1111 - > now we have to find number of 1's in this ans 
    concept 2 :  number we have is 1111 -> right shift the number till it becomes 0 
        and while right shifing check if it's odd or even means uska last bit 1 hai ya 0 hai and count++
        this loop run for log2n + 1 times 
    better approach : 
       Use Brian Kernighan's algorithm - to find number of set bits 
------------------------------------------------------------------------------------------------------------ 
highest-power-2-less-equal-given-number 
Brute force : multiply 1 with 2 until it is more than given number
Method 1 : take log of number and then pow the number. If n = 17 then log(17) = 4 and then pow( 2,4) = 16 
Method 2 : Bit manipulation  - When you have a number n (that is not a power of 2), the largest power of 2 that is less than n is always the most significant bit in n. In case of a number n that is a power of 2
		For a number 'n'  subtrace 1 to get n - 1 
		now n-1 will have bits from least significant bit flipped . Basically from righmost bit '1' it will flip 
		10 -> 1010   9 ->1001      8-> 1000    7 -> 0111 
		So if you take & of n and n-1 , you are eliminating least significant set bit. 
		so if n is not power of 2 then do n = n & ( n-1) till it becomes power of 2 
		
public class MathPow{
   public int largestPowerOf2(int n){
      if((n & n-1) == 0){ //this checks if n is a power of 2
         n--; //Since n is a power of 2 we have to subtract 1
      }
      while((n & n-1) != 0){ //the while will keep on going until n is a power of 2, in which case n will only have 1 bit on which is the maximum power of 2 less than n. You could eliminate the != 0 but just for clarity I left it in
         n = n & n-1; //we will then perform the bitwise operation AND with n and n-1 to eliminate the least significant bit of n 
      }
      return n;
   }
}

------------------------------------------------------------------------------------------------------------ 




Advance bit manipulation 

1. a^a = 0
2. 0^a  = a

Q. find the only non repeating element in array where every element repeats twice 
   we know xor of number with itself equals zero. so if we do combined xor of all elements in array 
   all other elements with pairs will cancel each other givning zero except one single element remains which will be our ans 

Q. find the two non repeating elements in array where every element repeats twice 
	https://www.youtube.com/watch?v=PnxTnKT0GUE&ab_channel=NerdStore 
	must !!!


Q. find rightmost set bit - > 
	n & ~(n-1) 
	
Q.Find only non repeating element where all other elements are repeating thrice
Sol - 

Explanation - https://www.youtube.com/watch?v=cOFAmaMBVps
 So there are couple of methods ; 
 Method 1 : Sorting - Sort the array and find out which number is not repeating at all. 
 	Time complexity - NlogN + N , but here are trick. Since N can not be more than Int max . log2(N) < 32 . Thus in worst case time complexity is O(32*N) 
Method 2 : count the bits methods
	you have to check which bit is occuring 3n+1 times 
	say arry is 2 2 3 2 - so if we sum the bits positionwise it will be 0 4 1 
 	so at position 0 and 1 , it is not multiple of three
 	So in this methos - in best, worst and avg complexities are O(32*N) 
 	This makes sorting a lil better approach
    
